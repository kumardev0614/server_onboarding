
const {betaToken} = require('./livekitToken');
const express = require("express");
var http = require("http");
const app = express();
const port = process.env.PORT || 3000;
var server = http.createServer(app);
var io = require("socket.io")(server);

app.use(express.json());


var i = 0;
var users = [];

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

// var token = betaToken("15555", "2000");
//     console.log(token);


//----------------Connection msg---------------------
io.on('connection', (socket) => {
  i = i + 1;
  console.log("------------------------------------------");
  console.log('user connected');
  console.log('Socket ID = ', socket.id);
  const count = io.engine.clientsCount;
  console.log("count is = " + count)
  
  
  users.push(socket.id);
  console.log("users:");
  console.log(users);


  socket.emit('chat message', "user " + count + " connected");
  socket.on('chat message', (msg) => {
    socket.broadcast.emit('chat message', msg);  // sending
    console.log("The msg is: " + msg);
  });

  socket.on('addValue', (data) => {
    var sum = data + data;
    socket.emit('showValue', sum);  // sending
    console.log("sum = " + sum);
  });
  

  socket.on('randomCall', async () => {
    if (users.length > 1){
      console.log("----------- random Call -----------");
      let user1 = users.shift();
      let user2 = users.shift();
      
      console.log("Total Users");
      console.log(users);
  
      myRoomId = generateRoomId().toString();
      console.log("myRoomId: " + myRoomId + " user1: " + user1 + " user2: " + user2);
      token1 = await betaToken(myRoomId, user1),
      token2 = await betaToken(myRoomId, user2),

      io.to(user1).emit('receiveRandomToken', token1);
      console.log("token1");
      console.log(token1);
      io.to(user2).emit('receiveRandomToken', token2);
      console.log("token2"); 
      console.log(token2);
      console.log("----------- random Call ended-----------");
    } else {
      console.log("Total Users are < 4")
    }
   });

  // ----------------- Fixed call --------------------------

  socket.on('call', async (data) => {
   let clintID = data;

    roomId = "hello";

    console.log("roomID: " + roomId + " clientID: " + clintID);
    var token = await betaToken(roomId, clintID);
    console.log(token);
    socket.emit('receiveFixedToken', token);  // sending
  });


  //---------------------------------------------------

  socket.on('disconnect', () => {
    users.pop(socket.id);
    console.log('-------- user disconnected -----------');
    });
});

function generateRoomId() {
  return Math.floor(1000 + Math.random() * 9000);
}

server.listen(3000, () => {
  console.log('listening on *:3000');
});  